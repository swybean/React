JSX 문법 1. 
class 넣을 땐 className

JSX 문법 2.
변수 꽂을 땐 {변수명}

JSX 문법 3.
style 넣을 땐 style={{이름 : '값'}}

<div className="list">
        <h4>글제목</h4>
        <p>2월 17일 발행</p>
      </div>

JSX 문법 4.
useState를 쓸 때는,
let [a, b] = useState('변수')
a는 '변수'를 나타내고,
b는 '변수'를 변경 시킨 값을 나타낸다. (state 변경용 함수)

일반 변수를 안쓰고 useState를 쓰는 이유
- 일반 변수는 변경되면 html에 자동으로 반영 안됨.
- useState를 사용하면 자동으로 html에 반영되서 재렌더링됨

useState를 언제 쓰냐?
- 변수 변경 시 자동으로 html에 반영되게 만들고 싶을 때 사용

빡대가리식 정리
- 자주 변경될거 같은 html 부분을 state로 만들기
  (ex : 글제목 등)
- 변경이 드물거나 없는 부분은 그냥 하드코딩 or 일반변수 사용
  (ex : 사이트명 등)

useState안에 [] 쓰기
  let [title1, setTitle1] = useState("남자 코트 추천");
  let [title2, setTitle2] = useState("강남 우동 맛집");
  let [title3, setTitle3] = useState("파이썬 독학");

  위 useState 3개를 한 번에 쓰는 법은 아래와 같다.
  let [title, setTitle] = useState([
    "남자 코트 추천",
    "강남 우동 맛집",
    "파이썬 독학",
  ]);

  이렇게 []안에 묶어서 작성한 다음에 인덱싱을 활용하면 아래와 같이 나온다.
  title[0]는 '남자 코트 추천'
  title[1]은 '강남 우동 맛집'
  title[2]는 '파이썬 독학'


JSX 문법 5.
/* eslint-disable */을 1번 라인에 작성하면 warning 메세지(노랑색)를 없앨 수 있음


JSX 문법 6.
원칙은 onClick={ } 안에는 '함수 이름'만 넣어야 한다.

다만, 
onClick={ function(){ console.log(1) } }
또는 아래 화살표 함수로
onClick={ ( ) => { console.log(1) } }
이렇게 바로 함수 만드는 문법을 넣어도 되긴 된다.


JSX 문법 7.
state를 변경하는 방법

첫 번째, 등호(=)로 변경 금지!!!
(ex : likeCount = likeCount + 1)
-> html에 반영되지 않는다.

두 번째, state 변경용 함수(위 4번에서 작성한 b)를 써야 html 재렌더링이 된다.

onclick 안에 넣을 함수에 b함수명을 넣고 
b함수 ()안에 구현하고자 하는 로직을 작성한다.

예시는 아래와 같다.
let [likeCount, setLikeCount] = useState(0);

  function likePlus() {
    setLikeCount(likeCount + 1);
  }

{title[0]} <span onClick={likePlus}>👍</span> {likeCount}

이러면 따봉 버튼을 누를 때마다 likeCount가 +1이 된다.

JSX 문법 8.
state 변경함수 특징
- 기존state == 신규state인 경우 변경안해줌

array / object 특징
- array / object를 담은 변수에는 화살표만 저장됨
예시) let arr = [1, 2, 3]; 이 있으면, arr에 [1, 2, 3]이 저장되는 것이 아니라,
미지의 공간(RAM)에 저장되고 arr은 그 공간을 화살표로 가르키기만 하는 것이다.

그렇기 때문에!
let [title, setTitle] = useState([
    "남자 코트 추천",
    "강남 우동 맛집",
    "파이썬 독학",
  ]);

  function changeTitle() {
    let copy = title;
    copy[0] = "여자 코트 추천";
    setTitle(copy);
  }
이렇게 작성하면 컴퓨터는 copy == title이라고 생각해서 
위 state 변경함수 특징에 의하여 title이 수정되지 않는 것이다.
(array, object는 refernce data type이기 때문이다. -> 궁금하면 더 찾아볼 것)

이를 해결하기 위해서는function changeTitle() {
    let copy = [...title];
    copy[0] = "여자 코트 추천";
    setTitle(copy);
  }

이렇게 let copy = [...title]로 적어줘야 한다.
-> ... 문법이 '괄호를 벗겨주고 새로 씌워주세요'라는 문법이다.
-> 따라서 화살표도 달라진다.
-> copy != title이 되어서 변경이 가능한 것이다.






